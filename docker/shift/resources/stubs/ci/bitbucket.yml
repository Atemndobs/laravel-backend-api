pipelines:
  pull-requests:
    '**':
      - parallel:
          - step:
              name: Check syntax
              image: overtrue/phplint:8.0
              script:
                - /root/.composer/vendor/bin/phplint .
          - step:
              name: Check style
              image: cytopia/php-cs-fixer:3-php8.0
              script:
                - php-cs-fixer fix --using-cache=no --verbose --dry-run
      - step:
          name: Composer
          image: php:8.0
          artifacts:
            - vendor/**
          caches:
            - composer
          script:
            - apt-get update -yqq
            - apt-get install git wget zip unzip libzip-dev -yqq
            - docker-php-ext-install -j$(nproc) pdo_mysql zip
            - wget https://composer.github.io/installer.sig -O - -q | tr -d '\n' > installer.sig
            - php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
            - php -r "if (hash_file('SHA384', 'composer-setup.php') === file_get_contents('installer.sig')) { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
            - php composer-setup.php
            - php -r "unlink('composer-setup.php'); unlink('installer.sig');"
            - php composer.phar install --prefer-dist --no-ansi --no-interaction --no-progress
      - parallel:
          - step:
              name: Run PHPStan
              script:
                - vendor/bin/phpstan analyze
          - step:
              name: Run Psalm
              script:
                - vendor/bin/psalm
      - parallel:
          - step:
              name: Run tests
              image: php:8.0
              services:
                - mysql
              script:
                - apt-get update -yqq
                - apt-get install zip unzip libnss3 libzip-dev -yqq
                - docker-php-ext-install -j$(nproc) pdo_mysql zip
                - cp .env.example .env
                - php artisan key:generate
                - export DB_CONNECTION=mysql
                - export DB_HOST=127.0.0.1
                - export DB_DATABASE=test
                - export DB_USERNAME=root
                - export DB_PASSWORD=''
                - php artisan test
          - step:
              name: Run Dusk
              image: edbizarro/gitlab-ci-pipeline-php:8.0-chromium
              services:
                - mysql
              artifacts:
                - tests/Browser/screenshots/**
                - tests/Browser/console/**
                - storage/logs/**
              caches:
                - node
              script:
                - export DB_CONNECTION=mysql
                - export DB_HOST=127.0.0.1
                - export DB_DATABASE=test
                - export DB_USERNAME=root
                - export DB_PASSWORD=''
                - export APP_URL=http://127.0.0.1:8000
                - export SESSION_DOMAIN=127.0.0.1
                - export CACHE_DRIVER=array
                - export TELESCOPE_ENABLED=false
                - cp .env.example .env
                - php artisan key:generate
                - php artisan migrate:fresh --seed
                - npm ci --no-progress --no-save --no-optional --prefer-offline
                - npm run production
                - php artisan serve --no-reload > storage/logs/server.log 2>&1 &
                - php artisan dusk:chrome-driver --detect
                - ./vendor/laravel/dusk/bin/chromedriver-linux --port=9515 &
                - sleep 5
                - php artisan dusk

definitions:
  services:
    mysql:
      image: mysql:8.0
      environment:
        MYSQL_DATABASE: test
        MYSQL_ALLOW_EMPTY_PASSWORD: 1
